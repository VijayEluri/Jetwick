# wicket
app.stage=development

# tweet index
solr.twsearch.url=http://localhost:8082/solr

# user index
solr.usearch.url=http://localhost:8081/solr
solr.usearch.blacklist=/home/peterk/.jetwick/userblacklist.txt

# remote index
solr.twsearch.remoteurl=http://pannous.info/twindex
solr.twsearch.login=user
solr.twsearch.password=pw

# how many days should be searchable?
solr.twsearch.remove.days=8
solr.twsearch.searchrt.days=2

# after how many tweets jetwick should commit
solr.twcollector.batchsize=100

# wait 12 hours then optimize
solr.twsearch.optimize.interval=12

# how many maximal segments after optimization?
# 2 is ok. use 1 for the most aggressive optimize or -1 for no optimize
solr.twsearch.optimize.segments=1

# database login. do NOT use an empty passwort for production
jetwick.hibernate.user=login
jetwick.hibernate.password=pw

# 0. read http://dev.twitter.com/pages/auth#intro
# 1. register your app here: http://dev.twitter.com/apps and get the consumerKey + consumerSecret
jetwick.twitter4j.main.consumerKey=
jetwick.twitter4j.main.consumerSecret=
# 2. create a new token + tokenSecret: login with your twitter account via jetwick and view the values
# see TwitterSearch.oAuthOnCallBack and log tmpRequestToken.getToken();tmpRequestToken.getTokenSecret();
jetwick.twitter4j.main.token=
jetwick.twitter4j.main.tokenSecret=

# to resolve shortened urls how many seconds to wait? how many threads to use?
tweet.resolveurl.timeout=2000
tweet.resolveurl.threads=80
tweet.resolveurl.avoidlist=/home/peterk/.jetwick/urltitleavoidlist.txt

# to feed tweets up on request set up a simple message queue through rmi
rmi.host=localhost
rmi.port=3232
rmi.service=rmiServer
